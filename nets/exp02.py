# model settings
model = dict(type='Detector',
             backbone=dict(type='DualSwinTransformer',
                           embed_dim=128,
                           depths=[2, 2, 18, 2],
                           num_heads=[4, 8, 16, 32],
                           drop_path_rate=0.2),
             neck=dict(type='DualFPN',
                       in_channels=[128, 256, 512, 1024],
                       out_channels=256, num_outs=5),
             rpn_head=dict(type='RPNHead',
                           in_channels=256,
                           anchor_generator=dict(type='AnchorGenerator',
                                                 scales=[8],
                                                 ratios=[0.5, 1.0, 2.0],
                                                 strides=[4, 8, 16, 32, 64]),
                           bbox_coder=dict(type='DeltaXYWHBBoxCoder',
                                           target_means=[.0, .0, .0, .0],
                                           target_stds=[1.0, 1.0, 1.0, 1.0]),
                           loss_cls=dict(type='CrossEntropyLoss',
                                         use_sigmoid=True, loss_weight=1.0),
                           loss_bbox=dict(type='SmoothL1Loss',
                                          beta=1.0 / 9.0, loss_weight=1.0)),
             roi_head=dict(type='SCNetRoIHead',
                           num_stages=3,
                           stage_loss_weights=[1, 0.5, 0.25],
                           bbox_roi_extractor=dict(type='SingleRoIExtractor',
                                                   roi_layer=dict(type='RoIAlign',
                                                                  output_size=7,
                                                                  sampling_ratio=0),
                                                   out_channels=256,
                                                   featmap_strides=[4, 8, 16, 32]),
                           bbox_head=[dict(type='SCNetBBoxHead',
                                           num_classes=2,
                                           in_channels=256,
                                           roi_feat_size=7,
                                           num_shared_fcs=2,
                                           bbox_coder=dict(type='DeltaXYWHBBoxCoder',
                                                           target_means=[0., 0., 0., 0.],
                                                           target_stds=[0.1, 0.1, 0.2, 0.2]),
                                           reg_class_agnostic=True,
                                           loss_cls=dict(type='CrossEntropyLoss',
                                                         use_sigmoid=False,
                                                         loss_weight=1.0),
                                           loss_bbox=dict(type='SmoothL1Loss',
                                                          beta=1.0, loss_weight=1.0)),
                                      dict(type='SCNetBBoxHead',
                                           num_classes=2,
                                           in_channels=256,
                                           roi_feat_size=7,
                                           num_shared_fcs=2,
                                           bbox_coder=dict(type='DeltaXYWHBBoxCoder',
                                                           target_means=[0., 0., 0., 0.],
                                                           target_stds=[0.05, 0.05, 0.1, 0.1]),
                                           reg_class_agnostic=True,
                                           loss_cls=dict(type='CrossEntropyLoss',
                                                         use_sigmoid=False,
                                                         loss_weight=1.0),
                                           loss_bbox=dict(type='SmoothL1Loss',
                                                          beta=1.0, loss_weight=1.0)),
                                      dict(type='SCNetBBoxHead',
                                           num_classes=2,
                                           in_channels=256,
                                           roi_feat_size=7,
                                           num_shared_fcs=2,
                                           bbox_coder=dict(type='DeltaXYWHBBoxCoder',
                                                           target_means=[0., 0., 0., 0.],
                                                           target_stds=[0.033, 0.033, 0.067, 0.067]),
                                           reg_class_agnostic=True,
                                           loss_cls=dict(type='CrossEntropyLoss',
                                                         use_sigmoid=False,
                                                         loss_weight=1.0),
                                           loss_bbox=dict(type='SmoothL1Loss',
                                                          beta=1.0, loss_weight=1.0))],
                           mask_roi_extractor=dict(type='SingleRoIExtractor',
                                                   roi_layer=dict(type='RoIAlign',
                                                                  output_size=14,
                                                                  sampling_ratio=0),
                                                   out_channels=256,
                                                   featmap_strides=[4, 8, 16, 32]),
                           mask_head=dict(type='SCNetMaskHead',
                                          num_convs=12,
                                          num_classes=2,
                                          in_channels=256,
                                          conv_to_res=True,
                                          conv_out_channels=256,
                                          loss_mask=dict(type='CrossEntropyLoss',
                                                         use_mask=True,
                                                         loss_weight=1.0)),
                           glbctx_head=dict(type='GlobalContextHead',
                                            num_convs=4,
                                            num_classes=2,
                                            in_channels=256,
                                            conv_out_channels=256,
                                            loss_weight=3.0,
                                            conv_to_res=True),
                           feat_relay_head=dict(type='FeatureRelayHead',
                                                in_channels=1024,
                                                out_conv_channels=256,
                                                roi_feat_size=7,
                                                scale_factor=2)),
             # model training and testing settings
             train_cfg=dict(rpn=dict(assigner=dict(type='MaxIoUAssigner',
                                                   pos_iou_thr=0.7,
                                                   neg_iou_thr=0.3,
                                                   min_pos_iou=0.3,
                                                   match_low_quality=True,
                                                   ignore_iof_thr=-1),
                                     sampler=dict(type='RandomSampler',
                                                  num=256,
                                                  pos_fraction=0.5,
                                                  neg_pos_ub=-1,
                                                  add_gt_as_proposals=False),
                                     allowed_border=0,
                                     pos_weight=-1,
                                     debug=False),
                            rpn_proposal=dict(nms_pre=2000,
                                              max_per_img=2000,
                                              nms=dict(type='nms', iou_threshold=0.7),
                                              min_bbox_size=0),
                            rcnn=[dict(assigner=dict(type='MaxIoUAssigner',
                                                     pos_iou_thr=0.5,
                                                     neg_iou_thr=0.5,
                                                     min_pos_iou=0.5,
                                                     match_low_quality=False,
                                                     ignore_iof_thr=-1),
                                       sampler=dict(type='RandomSampler',
                                                    num=512,
                                                    pos_fraction=0.25,
                                                    neg_pos_ub=-1,
                                                    add_gt_as_proposals=True),
                                       mask_size=28,
                                       pos_weight=-1,
                                       debug=False),
                                  dict(assigner=dict(type='MaxIoUAssigner',
                                                     pos_iou_thr=0.6,
                                                     neg_iou_thr=0.6,
                                                     min_pos_iou=0.6,
                                                     match_low_quality=False,
                                                     ignore_iof_thr=-1),
                                       sampler=dict(type='RandomSampler',
                                                    num=512,
                                                    pos_fraction=0.25,
                                                    neg_pos_ub=-1,
                                                    add_gt_as_proposals=True),
                                       mask_size=28,
                                       pos_weight=-1,
                                       debug=False),
                                  dict(assigner=dict(type='MaxIoUAssigner',
                                                     pos_iou_thr=0.7,
                                                     neg_iou_thr=0.7,
                                                     min_pos_iou=0.7,
                                                     match_low_quality=False,
                                                     ignore_iof_thr=-1),
                                       sampler=dict(type='RandomSampler',
                                                    num=512,
                                                    pos_fraction=0.25,
                                                    neg_pos_ub=-1,
                                                    add_gt_as_proposals=True),
                                       mask_size=28,
                                       pos_weight=-1,
                                       debug=False)]),
             test_cfg=dict(rpn=dict(nms=dict(type='nms', iou_threshold=0.7),
                                    nms_pre=1000,
                                    max_per_img=1000,
                                    min_bbox_size=0),
                           rcnn=dict(nms=dict(type='soft_nms', iou_threshold=0.5),
                                     score_thr=0.001,
                                     max_per_img=100,
                                     mask_thr_binary=0.5)))
# dataset settings
dataset_type = 'INSDataset'
data_root = '../Dataset/Ins2021/'
samples_per_gpu = 1
workers_per_gpu = 4
img_norm_cfg = dict(mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [dict(type='LoadImageFromFile'),
                  dict(type='TSCopyPaste'),
                  dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
                  dict(type='RandomAugment'),
                  dict(type='Resize',
                       img_scale=[(1600, 800), (1600, 1400)],
                       multiscale_mode='range', keep_ratio=True),
                  dict(type='RandomFlip', flip_ratio=0.5),
                  dict(type='Normalize', **img_norm_cfg),
                  dict(type='GridDropout'),
                  dict(type='Pad', size_divisor=32),
                  dict(type='DefaultFormatBundle'),
                  dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])]
test_pipeline = [dict(type='LoadImageFromFile'),
                 dict(type='MultiScaleFlipAug',
                      img_scale=(1600, 1400),
                      flip=False,
                      transforms=[dict(type='Resize', keep_ratio=True),
                                  dict(type='RandomFlip'),
                                  dict(type='Normalize', **img_norm_cfg),
                                  dict(type='Pad', size_divisor=32),
                                  dict(type='ImageToTensor', keys=['img']),
                                  dict(type='Collect', keys=['img'])])]
data = dict(samples_per_gpu=samples_per_gpu,
            workers_per_gpu=workers_per_gpu,
            train=dict(type=dataset_type,
                       ann_file=data_root + 'annotation/train_aug.json',
                       img_prefix=data_root + 'aug_images/',
                       pipeline=train_pipeline),
            val=dict(type=dataset_type,
                     ann_file=data_root + 'annotation/val.json',
                     img_prefix=data_root + 'val/',
                     pipeline=test_pipeline),
            test=dict(type=dataset_type,
                      ann_file=data_root + 'annotation/test.json',
                      img_prefix=data_root + 'test/',
                      pipeline=test_pipeline))
evaluation = dict(interval=1, metric='segm')
optimizer = dict(type='AdamW',
                 lr=0.0001 * (samples_per_gpu / 2),
                 betas=(0.9, 0.999), weight_decay=0.05,
                 paramwise_cfg=dict(custom_keys={'norm': dict(decay_mult=0.),
                                                 'relative_position_bias_table': dict(decay_mult=0.)}))
optimizer_config = dict(grad_clip=None)
fp16 = dict(loss_scale='dynamic')
lr_config = dict(policy='step',
                 warmup='linear',
                 warmup_iters=1000,
                 warmup_ratio=0.1,
                 step=[65, 71])
runner = dict(type='EpochBasedRunner', max_epochs=73)
checkpoint_config = dict(interval=73)
log_config = dict(interval=160, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
